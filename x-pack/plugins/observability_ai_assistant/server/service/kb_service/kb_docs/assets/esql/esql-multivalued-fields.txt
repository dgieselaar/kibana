ES|QL multivalued fields 

ES|QL is fine reading from multivalued fields:
    POST /mv/_bulk?refresh
    { "index" : {} }
    { "a": 1, "b": [2, 1] }
    { "index" : {} }
    { "a": 2, "b": 3 }
    POST /_query
    {
      "query": "FROM mv"
    }
Multivalued fields come back as a JSON array:
    {
      "columns": [
        { "name": "a", "type": "long"},
        { "name": "b", "type": "long"}
      ],
      "values": [
        [1, [1, 2]],
        [2,      3]
      ]
    }
The relative order of values in a multivalued field is undefined.
They’ll frequently be in ascending order but don’t rely on that.
Duplicate values
Some field types, like keyword remove duplicate values on write:
    PUT /mv
    {
      "mappings": {
        "properties": {
          "b": {"type": "keyword"}
        }
      }
    }
    POST /mv/_bulk?refresh
    { "index" : {} }
    { "a": 1, "b": ["foo", "foo", "bar"] }
    { "index" : {} }
    { "a": 2, "b": ["bar", "bar"] }
    POST /_query
    {
      "query": "FROM mv"
    }
And ES|QL sees that removal:
    {
      "columns": [
        { "name": "a", "type": "long"},
        { "name": "b", "type": "keyword"}
      ],
      "values": [
        [1, ["bar", "foo"]],
        [2,          "bar"]
      ]
    }
But other types, like long don’t remove duplicates.
    PUT /mv
    {
      "mappings": {
        "properties": {
          "b": {"type": "long"}
        }
      }
    }
    POST /mv/_bulk?refresh
    { "index" : {} }
    { "a": 1, "b": [2, 2, 1] }
    { "index" : {} }
    { "a": 2, "b": [1, 1] }
    POST /_query
    {
      "query": "FROM mv"
    }
And ES|QL also sees that:
    {
      "columns": [
        { "name": "a", "type": "long"},
        { "name": "b", "type": "long"}
      ],
      "values": [
        [1, [1, 2, 2]],
        [2,    [1, 1]]
      ]
    }
This is all at the storage layer. If you store duplicate `long`s and
then convert them to strings the duplicates will stay:
    PUT /mv
    {
      "mappings": {
        "properties": {
          "b": {"type": "long"}
        }
      }
    }
    POST /mv/_bulk?refresh
    { "index" : {} }
    { "a": 1, "b": [2, 2, 1] }
    { "index" : {} }
    { "a": 2, "b": [1, 1] }
    POST /_query
    {
      "query": "FROM mv | EVAL b=TO_STRING(b)"
    }
    {
      "columns": [
        { "name": "a", "type": "long"},
        { "name": "b", "type": "keyword"}
      ],
      "values": [
        [1, ["1", "2", "2"]],
        [2,      ["1", "1"]]
      ]
    }
Functions
Unless otherwise documented functions will return null when applied to a
multivalued field. This behavior may change in a later version.
    POST /mv/_bulk?refresh
    { "index" : {} }
    { "a": 1, "b": [2, 1] }
    { "index" : {} }
    { "a": 2, "b": 3 }
    POST /_query
    {
      "query": "FROM mv | EVAL b + 2, a + b"
    }
    {
      "columns": [
        { "name": "a",   "type": "long"},
        { "name": "b",   "type": "long"},
        { "name": "b+2", "type": "long"},
        { "name": "a+b", "type": "long"}
      ],
      "values": [
        [1, [1, 2], null, null],
        [2,      3,    5,    5]
      ]
    }
Work around this limitation by converting the field to single value with
one of:
-   MV_AVG
-   MV_CONCAT
-   MV_COUNT
-   MV_MAX
-   MV_MEDIAN
-   MV_MIN
-   MV_SUM
    POST /_query
    {
      "query": "FROM mv | EVAL b=MV_MIN(b) | EVAL b + 2, a + b"
    }
    {
      "columns": [
        { "name": "a",   "type": "long"},
        { "name": "b",   "type": "long"},
        { "name": "b+2", "type": "long"},
        { "name": "a+b", "type": "long"}
      ],
      "values": [
        [1, 1, 3, 2],
        [2, 3, 5, 5]
      ]
    }
